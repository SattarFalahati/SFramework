//
//  SFObject.h
//  SFramevork
//
//  Created by Sattar Falahati on 12/07/16.
//
//

#import <Foundation/Foundation.h>

@interface  NSObject (SFObject)

/// Check if an object is empty
- (BOOL)isEmpty;

/// Check if an object is NOT empty 
- (BOOL)isNotEmpty;

/**
 *  Returns whether the reciever is equal to the object passed in.
 *
 *  This method uses `compare:` to determine equality, not `isEquals:`.
 *
 *  @param object The object to compare to.
 *
 *  @return `YES` if the receiver is equal to the first parameter, otherwise `NO`.
 */
- (BOOL)isEqualTo:(id)object;
- (BOOL)isLessThanOrEqualTo:(id)object;

/**
 *  Returns whether the reciever is less than the object passed in.
 *
 *  @param object The object to compare to.
 *
 *  @return `YES` if the receiver is less than the first parameter, otherwise `NO`.
 */
- (BOOL)isLessThan:(id)object;

/**
 *  Returns whether the reciever is greater than or equal to the object passed in.
 *
 *  @param object The object to compare to.
 *
 *  @return `YES` if the receiver is greater than or equal to the first parameter, otherwise `NO`.
 */
- (BOOL)isGreaterThanOrEqualTo:(id)object;

/**
 *  Returns whether the reciever is greater than the object passed in, otherwise `NO`.
 *
 *  @param object The object to compare to.
 *
 *  @return `YES` if the receiver is equal to the first parameter.
 */
- (BOOL)isGreaterThan:(id)object;

/**
 *  Returns whether the reciever is not equal to the object passed in.
 *
 *  @param object The object to compare to.
 *
 *  @return `YES` if the receiver is not equal to the first parameter, otherwise `NO`.
 */
- (BOOL)isNotEqualTo:(id)object;

@end

@interface NSArray (SFArr)

- (id)safeObjectAtIndex:(NSUInteger)index;

/**
 *  @return an array containing all countreies
 */
+ (NSArray *)getCountriesName;

/**
 *  Returns an a new array with duplicate objects removed.
 *
 *  The new array contains references to the receiving array’s elements, not copies of them.
 *
 *  Duplicates are determined by the `isEqual:` method.
 *
 *  @return A new array with duplicate objects removed.
 */
- (NSArray *)arrayWithRemovedDuplicatedObjects;

/**
 *  Returns an array that lists the receiving array’s elements in ascending order, as determined by the `compare:` method. All objects must respond to the `compare:` method, or an exception will be thrown.
 *
 *  The new array contains references to the receiving array’s elements, not copies of them.
 *
 *  @return A new array with values in ascending order.
 */
- (NSArray *)arrayWithSortedAscendingOrder;

/**
 *  Returns an array that lists the receiving array’s elements in reverse order.
 *
 *  The new array contains references to the receiving array’s elements, not copies of them.
 *
 *  @return A new array with values in reversed order.
 */
- (NSArray *)arrayWithSortedReversedOrder;

/**
 *  Returns an array containing all the objects of subarrays in the same order.
 *
 *  The new array contains references to the receiving array’s elements, not copies of them.
 *
 *  @return A new array with subarray objects brought up to the top level.
 */
- (NSArray *)flattenedArray;

/**
 *  Returns an array with all NSNull objects removed.
 *
 *  The new array contains references to the receiving array’s elements, not copies of them.
 *
 *  @return A new array with all NSNull objects removed.
 */
- (NSArray *)arrayWithRemovedNullObjects;

/**
 *  Returns a random object in the array. The random index is generated by arc4random(). 
 *
 *  If the array is empty, this method returns nil.
 *
 *  @return A random object in the array, or nil if the array is empty.
 */
- (id)getRandomObject;

/**
 *  Creates a string of the JSON representation of the array.
 *
 *  @return An NSString containing the JSON representation of the array.
 */
- (NSString *)createJSONString;

@end

@interface NSMutableArray (SFMutArr)

/// Move object from index to index in an array
- (void)moveObjectFromIndext:(NSUInteger)fromIndex toIndex:(NSUInteger)toIndex;

/// Add or remove object inisde an array
- (void)toggleObject:(id)object;

@end
